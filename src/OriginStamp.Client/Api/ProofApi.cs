/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OriginStamp.Client.Client;
using OriginStamp.Client.Model;

namespace OriginStamp.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProofApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Proof
        /// </summary>
        /// <remarks>
        /// Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </remarks>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>DefaultOfDownloadLinkResponse</returns>
        DefaultOfDownloadLinkResponse GetProof (string authorization, ProofRequest proofRequestUrl);

        /// <summary>
        /// Proof
        /// </summary>
        /// <remarks>
        /// Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </remarks>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>ApiResponse of DefaultOfDownloadLinkResponse</returns>
        ApiResponse<DefaultOfDownloadLinkResponse> GetProofWithHttpInfo (string authorization, ProofRequest proofRequestUrl);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Proof
        /// </summary>
        /// <remarks>
        /// Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </remarks>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>Task of DefaultOfDownloadLinkResponse</returns>
        System.Threading.Tasks.Task<DefaultOfDownloadLinkResponse> GetProofAsync (string authorization, ProofRequest proofRequestUrl);

        /// <summary>
        /// Proof
        /// </summary>
        /// <remarks>
        /// Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </remarks>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>Task of ApiResponse (DefaultOfDownloadLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultOfDownloadLinkResponse>> GetProofAsyncWithHttpInfo (string authorization, ProofRequest proofRequestUrl);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProofApi : IProofApi
    {
        private OriginStamp.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProofApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProofApi(String basePath)
        {
            this.Configuration = new OriginStamp.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OriginStamp.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProofApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProofApi(OriginStamp.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OriginStamp.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OriginStamp.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OriginStamp.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OriginStamp.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Proof Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </summary>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>DefaultOfDownloadLinkResponse</returns>
        public DefaultOfDownloadLinkResponse GetProof (string authorization, ProofRequest proofRequestUrl)
        {
             ApiResponse<DefaultOfDownloadLinkResponse> localVarResponse = GetProofWithHttpInfo(authorization, proofRequestUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Proof Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </summary>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>ApiResponse of DefaultOfDownloadLinkResponse</returns>
        public ApiResponse< DefaultOfDownloadLinkResponse > GetProofWithHttpInfo (string authorization, ProofRequest proofRequestUrl)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProofApi->GetProof");
            // verify the required parameter 'proofRequestUrl' is set
            if (proofRequestUrl == null)
                throw new ApiException(400, "Missing required parameter 'proofRequestUrl' when calling ProofApi->GetProof");

            var localVarPath = "/v3/timestamp/proof/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (proofRequestUrl != null && proofRequestUrl.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(proofRequestUrl); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proofRequestUrl; // byte array
            }

            // authentication (API Key Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOfDownloadLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOfDownloadLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOfDownloadLinkResponse)));
        }

        /// <summary>
        /// Proof Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </summary>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>Task of DefaultOfDownloadLinkResponse</returns>
        public async System.Threading.Tasks.Task<DefaultOfDownloadLinkResponse> GetProofAsync (string authorization, ProofRequest proofRequestUrl)
        {
             ApiResponse<DefaultOfDownloadLinkResponse> localVarResponse = await GetProofAsyncWithHttpInfo(authorization, proofRequestUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Proof Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \&quot;application/octet-stream\&quot; in the \&quot;Accept\&quot; header.
        /// </summary>
        /// <exception cref="OriginStamp.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">A valid API key is essential for authorization to handle the request.</param>
        /// <param name="proofRequestUrl">Information needed to return the proof.</param>
        /// <returns>Task of ApiResponse (DefaultOfDownloadLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DefaultOfDownloadLinkResponse>> GetProofAsyncWithHttpInfo (string authorization, ProofRequest proofRequestUrl)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProofApi->GetProof");
            // verify the required parameter 'proofRequestUrl' is set
            if (proofRequestUrl == null)
                throw new ApiException(400, "Missing required parameter 'proofRequestUrl' when calling ProofApi->GetProof");

            var localVarPath = "/v3/timestamp/proof/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (proofRequestUrl != null && proofRequestUrl.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(proofRequestUrl); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proofRequestUrl; // byte array
            }

            // authentication (API Key Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOfDownloadLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOfDownloadLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOfDownloadLinkResponse)));
        }

    }
}
