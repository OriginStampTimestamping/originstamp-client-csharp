/* 
 * OriginStamp Client
 * 
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://doc.originstamp.org
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// The default service response object uses error code and message to indicate errors. These errors are handled by the client.
    /// </summary>
    [DataContract]
    public partial class DefaultUsageResponse :  IEquatable<DefaultUsageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultUsageResponse" /> class.
        /// </summary>
        /// <param name="Data">Generic response object which contains the response data, e.g. timestamp information..</param>
        /// <param name="ErrorCode">Contains the error of the request. If the error code is 0, everything is fine..</param>
        /// <param name="ErrorMessage">Contains the error message, that possibly occurred. If it is empty, everything is fine..</param>
        public DefaultUsageResponse(UsageResponse Data = default(UsageResponse), int? ErrorCode = default(int?), string ErrorMessage = default(string))
        {
            this.Data = Data;
            this.ErrorCode = ErrorCode;
            this.ErrorMessage = ErrorMessage;
        }
        
        /// <summary>
        /// Generic response object which contains the response data, e.g. timestamp information.
        /// </summary>
        /// <value>Generic response object which contains the response data, e.g. timestamp information.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public UsageResponse Data { get; set; }

        /// <summary>
        /// Contains the error of the request. If the error code is 0, everything is fine.
        /// </summary>
        /// <value>Contains the error of the request. If the error code is 0, everything is fine.</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Contains the error message, that possibly occurred. If it is empty, everything is fine.
        /// </summary>
        /// <value>Contains the error message, that possibly occurred. If it is empty, everything is fine.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultUsageResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultUsageResponse);
        }

        /// <summary>
        /// Returns true if DefaultUsageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultUsageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultUsageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
