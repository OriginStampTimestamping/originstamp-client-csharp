/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// DTO for the download link of a proof request.
    /// </summary>
    [DataContract]
    public partial class DownloadLinkResponse :  IEquatable<DownloadLinkResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadLinkResponse" /> class.
        /// </summary>
        /// <param name="downloadUrl">URL to download file..</param>
        /// <param name="fileName">File name of downloaded file..</param>
        /// <param name="fileSizeBytes">File size in bytes..</param>
        public DownloadLinkResponse(string downloadUrl = default(string), string fileName = default(string), long? fileSizeBytes = default(long?))
        {
            this.DownloadUrl = downloadUrl;
            this.FileName = fileName;
            this.FileSizeBytes = fileSizeBytes;
        }
        
        /// <summary>
        /// URL to download file.
        /// </summary>
        /// <value>URL to download file.</value>
        [DataMember(Name="download_url", EmitDefaultValue=false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// File name of downloaded file.
        /// </summary>
        /// <value>File name of downloaded file.</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// File size in bytes.
        /// </summary>
        /// <value>File size in bytes.</value>
        [DataMember(Name="file_size_bytes", EmitDefaultValue=false)]
        public long? FileSizeBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DownloadLinkResponse {\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSizeBytes: ").Append(FileSizeBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DownloadLinkResponse);
        }

        /// <summary>
        /// Returns true if DownloadLinkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DownloadLinkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DownloadLinkResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSizeBytes == input.FileSizeBytes ||
                    (this.FileSizeBytes != null &&
                    this.FileSizeBytes.Equals(input.FileSizeBytes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileSizeBytes != null)
                    hashCode = hashCode * 59 + this.FileSizeBytes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
