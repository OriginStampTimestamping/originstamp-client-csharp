/* 
 * OriginStamp Client
 * 
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://doc.originstamp.org
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// request object for proof request.
    /// </summary>
    [DataContract]
    public partial class ProofRequest :  IEquatable<ProofRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProofRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProofRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProofRequest" /> class.
        /// </summary>
        /// <param name="Currency">0: Bitcoin (required).</param>
        /// <param name="HashString">Hash in HEX representation for which the proof should be created. We allow the use of SHA-256. Note: We handle the hashes in lower-case. (required).</param>
        /// <param name="ProofType">Specifies which type of file should be returned. Possible value(s):  0: proof with a seed file (txt) or proof with a merkle tree (xml) 1: proof with a PDF file   Other formats will follow. (required).</param>
        public ProofRequest(int? Currency = default(int?), string HashString = default(string), int? ProofType = default(int?))
        {
            // to ensure "Currency" is required (not null)
            if (Currency == null)
            {
                throw new InvalidDataException("Currency is a required property for ProofRequest and cannot be null");
            }
            else
            {
                this.Currency = Currency;
            }
            // to ensure "HashString" is required (not null)
            if (HashString == null)
            {
                throw new InvalidDataException("HashString is a required property for ProofRequest and cannot be null");
            }
            else
            {
                this.HashString = HashString;
            }
            // to ensure "ProofType" is required (not null)
            if (ProofType == null)
            {
                throw new InvalidDataException("ProofType is a required property for ProofRequest and cannot be null");
            }
            else
            {
                this.ProofType = ProofType;
            }
        }
        
        /// <summary>
        /// 0: Bitcoin
        /// </summary>
        /// <value>0: Bitcoin</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public int? Currency { get; set; }

        /// <summary>
        /// Hash in HEX representation for which the proof should be created. We allow the use of SHA-256. Note: We handle the hashes in lower-case.
        /// </summary>
        /// <value>Hash in HEX representation for which the proof should be created. We allow the use of SHA-256. Note: We handle the hashes in lower-case.</value>
        [DataMember(Name="hash_string", EmitDefaultValue=false)]
        public string HashString { get; set; }

        /// <summary>
        /// Specifies which type of file should be returned. Possible value(s):  0: proof with a seed file (txt) or proof with a merkle tree (xml) 1: proof with a PDF file   Other formats will follow.
        /// </summary>
        /// <value>Specifies which type of file should be returned. Possible value(s):  0: proof with a seed file (txt) or proof with a merkle tree (xml) 1: proof with a PDF file   Other formats will follow.</value>
        [DataMember(Name="proof_type", EmitDefaultValue=false)]
        public int? ProofType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProofRequest {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  HashString: ").Append(HashString).Append("\n");
            sb.Append("  ProofType: ").Append(ProofType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProofRequest);
        }

        /// <summary>
        /// Returns true if ProofRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProofRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProofRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.HashString == input.HashString ||
                    (this.HashString != null &&
                    this.HashString.Equals(input.HashString))
                ) && 
                (
                    this.ProofType == input.ProofType ||
                    (this.ProofType != null &&
                    this.ProofType.Equals(input.ProofType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.HashString != null)
                    hashCode = hashCode * 59 + this.HashString.GetHashCode();
                if (this.ProofType != null)
                    hashCode = hashCode * 59 + this.ProofType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
