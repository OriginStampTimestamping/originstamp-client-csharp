/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// Request object for bulk timestamping request.
    /// </summary>
    [DataContract]
    public partial class TimestampBulkRequest :  IEquatable<TimestampBulkRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampBulkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimestampBulkRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampBulkRequest" /> class.
        /// </summary>
        /// <param name="timestamps">Array of timestamp request DTOs which will be timestamped. (required).</param>
        public TimestampBulkRequest(List<TimestampRequest> timestamps = default(List<TimestampRequest>))
        {
            // to ensure "timestamps" is required (not null)
            if (timestamps == null)
            {
                throw new InvalidDataException("timestamps is a required property for TimestampBulkRequest and cannot be null");
            }
            else
            {
                this.Timestamps = timestamps;
            }
        }
        
        /// <summary>
        /// Array of timestamp request DTOs which will be timestamped.
        /// </summary>
        /// <value>Array of timestamp request DTOs which will be timestamped.</value>
        [DataMember(Name="timestamps", EmitDefaultValue=false)]
        public List<TimestampRequest> Timestamps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimestampBulkRequest {\n");
            sb.Append("  Timestamps: ").Append(Timestamps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimestampBulkRequest);
        }

        /// <summary>
        /// Returns true if TimestampBulkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TimestampBulkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimestampBulkRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamps == input.Timestamps ||
                    this.Timestamps != null &&
                    this.Timestamps.SequenceEqual(input.Timestamps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamps != null)
                    hashCode = hashCode * 59 + this.Timestamps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
