/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// request object for a timestamp request.
    /// </summary>
    [DataContract]
    public partial class TimestampRequest :  IEquatable<TimestampRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimestampRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimestampRequest" /> class.
        /// </summary>
        /// <param name="comment">You can add a short comment (max. 256 characters) which can be used for indexing and searching (public)..</param>
        /// <param name="hash">Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain. (required).</param>
        /// <param name="notifications">Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information..</param>
        public TimestampRequest(string comment = default(string), string hash = default(string), List<Notification> notifications = default(List<Notification>))
        {
            // to ensure "hash" is required (not null)
            if (hash == null)
            {
                throw new InvalidDataException("hash is a required property for TimestampRequest and cannot be null");
            }
            else
            {
                this.Hash = hash;
            }
            this.Comment = comment;
            this.Notifications = notifications;
        }
        
        /// <summary>
        /// You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).
        /// </summary>
        /// <value>You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.
        /// </summary>
        /// <value>Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.
        /// </summary>
        /// <value>Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<Notification> Notifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimestampRequest {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimestampRequest);
        }

        /// <summary>
        /// Returns true if TimestampRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TimestampRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimestampRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
