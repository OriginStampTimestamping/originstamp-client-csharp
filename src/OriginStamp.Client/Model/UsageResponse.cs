/* 
 * OriginStamp Client
 * 
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://doc.originstamp.org
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OriginStamp.Client.Client.SwaggerDateConverter;

namespace OriginStamp.Client.Model
{
    /// <summary>
    /// Get the current credit usage for this month.
    /// </summary>
    [DataContract]
    public partial class UsageResponse :  IEquatable<UsageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageResponse" /> class.
        /// </summary>
        /// <param name="ConsumedCredits">Represents the number of used credits for the current month..</param>
        /// <param name="CreditsPerMonth">Represents the total number of credits per month..</param>
        /// <param name="RemainingCredits">Represents the remaining number of credits for the current month..</param>
        public UsageResponse(decimal? ConsumedCredits = default(decimal?), decimal? CreditsPerMonth = default(decimal?), decimal? RemainingCredits = default(decimal?))
        {
            this.ConsumedCredits = ConsumedCredits;
            this.CreditsPerMonth = CreditsPerMonth;
            this.RemainingCredits = RemainingCredits;
        }
        
        /// <summary>
        /// Represents the number of used credits for the current month.
        /// </summary>
        /// <value>Represents the number of used credits for the current month.</value>
        [DataMember(Name="consumed_credits", EmitDefaultValue=false)]
        public decimal? ConsumedCredits { get; set; }

        /// <summary>
        /// Represents the total number of credits per month.
        /// </summary>
        /// <value>Represents the total number of credits per month.</value>
        [DataMember(Name="credits_per_month", EmitDefaultValue=false)]
        public decimal? CreditsPerMonth { get; set; }

        /// <summary>
        /// Represents the remaining number of credits for the current month.
        /// </summary>
        /// <value>Represents the remaining number of credits for the current month.</value>
        [DataMember(Name="remaining_credits", EmitDefaultValue=false)]
        public decimal? RemainingCredits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageResponse {\n");
            sb.Append("  ConsumedCredits: ").Append(ConsumedCredits).Append("\n");
            sb.Append("  CreditsPerMonth: ").Append(CreditsPerMonth).Append("\n");
            sb.Append("  RemainingCredits: ").Append(RemainingCredits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageResponse);
        }

        /// <summary>
        /// Returns true if UsageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumedCredits == input.ConsumedCredits ||
                    (this.ConsumedCredits != null &&
                    this.ConsumedCredits.Equals(input.ConsumedCredits))
                ) && 
                (
                    this.CreditsPerMonth == input.CreditsPerMonth ||
                    (this.CreditsPerMonth != null &&
                    this.CreditsPerMonth.Equals(input.CreditsPerMonth))
                ) && 
                (
                    this.RemainingCredits == input.RemainingCredits ||
                    (this.RemainingCredits != null &&
                    this.RemainingCredits.Equals(input.RemainingCredits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumedCredits != null)
                    hashCode = hashCode * 59 + this.ConsumedCredits.GetHashCode();
                if (this.CreditsPerMonth != null)
                    hashCode = hashCode * 59 + this.CreditsPerMonth.GetHashCode();
                if (this.RemainingCredits != null)
                    hashCode = hashCode * 59 + this.RemainingCredits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
